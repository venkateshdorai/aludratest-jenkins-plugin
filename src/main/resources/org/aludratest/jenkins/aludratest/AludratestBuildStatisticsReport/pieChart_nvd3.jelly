<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core">
	<table style="border: 0">
		<tr>
			<td>
				<div style='text-align: center; font-size: 16px; font-family:"Lucida Grande", "Lucida Sans Unicode", Arial, Helvetica, sans-serif;'>Current Build</div>
				<div style="height: 400px; width: 500px">
					<svg id="chart_pie_current" class="nvd3"></svg>
				</div>
			</td>
			<td>
				<div style='text-align: center; font-size: 16px; font-family:"Lucida Grande", "Lucida Sans Unicode", Arial, Helvetica, sans-serif;'>
					<j:if test="${request.getParameter('compareBuildId') != null}">Build #${it.getBuildNumber(request.getParameter('compareBuildId'))}</j:if>
				</div>
				<div style="height: 400px; width: 500px">
					<svg id="chart_pie_compare" class="nvd3"></svg>
				</div>
			</td>
		</tr>
	</table>
	
	<div style="width: 500px">
		<table id="chart_pie_datatable" class="display" width="100%"></table>
	</div>
	
	<script src="${resURL}/plugin/aludratest/js/d3.min.js"></script>
	<script src="${resURL}/plugin/aludratest/js/nv.d3.min.js"></script>
	  <script src="${resURL}/plugin/aludratest/js/jquery.min.js"></script>
	  <script type="text/javascript">
	  	jQuery.noConflict();
	  </script>
	  <script type="text/javascript" src="${resURL}/plugin/aludratest/js/jquery.dataTables.min.js"></script>
     <script src="${resURL}/plugin/aludratest/js/statusColors.js"></script>
	
	<!-- this replaces the Array.prototype.every method with its original implementation, to replace Prototype.JS implementation,
	which is incompatible to NVD3 (and does not conform to standards) -->
	<script src="${resURL}/plugin/aludratest/js/every.polyfill.js"></script>
	
	<script type="text/javascript">
		function generateExecutionPieChart(renderTo, statistics) {
	   		// series data for pie
	        var pieData = new Array();
	        var totalCount = 0;
	        jQuery.each(statistics.numberOfTestsByStatus, function(key, value) {
	        	pieData.push({
	          	name: key,
	            color: statusColors[key],
	            y: value
	          });
	          totalCount += value;
	        });
	        if (statistics.numberOfIgnoredSuccessfulTests > 0) {
	          pieData.push({
				name: 'IGNORED_PASSED',
	            y: statistics.numberOfIgnoredSuccessfulTests,
	            color: statusColors['IGNORED_PASSED']
	          });
	          totalCount += statistics.numberOfIgnoredSuccessfulTests;
	        }
	        if (statistics.numberOfIgnoredFailedTests > 0) {
	          pieData.push({
				name: 'IGNORED_FAILED',
	            y: statistics.numberOfIgnoredFailedTests,
	            color: statusColors['IGNORED_FAILED']
	          });
	          totalCount += statistics.numberOfIgnoredFailedTests;
	        }
	        
	        pieData.sort(function(a, b) {
	        	return expectedStatusOrder.indexOf(a.name) - expectedStatusOrder.indexOf(b.name);  
	        });
	        
        	var chart = nv.models.pieChart()
        		.x(function(d) { return d.name; })
        		.y(function(d) { return d.y; })
        		.showLabels(false)
        		.showLegend(true);
        		
        	chart.legend.columnize(false);
        	chart.legend.alignAnchor('center');
        	
        	chart.valueFormat(function(d, i) {
        		var percent = totalCount == 0 ? 0 : (d / totalCount) * 100; 
        		return d.toFixed(0) + " (" + percent.toFixed(2) + "%)"; 
        	});
        	
        	chart.legend.dispatch.on("stateChange.filterList", function() { 
        		if (typeof(updateTestCaseFilter) === 'function') {
        			updateTestCaseFilter();
        		}
        	});
        	
        	// move legend to bottom whenever rendered
        	chart.dispatch.on("renderEnd.moveLegend", function() { 
	        	d3.selectAll(".nvd3.nv-pieChart").attr("transform", "translate(20, 0)");
	        	d3.selectAll(".nvd3.nv-pieChart .nv-legendWrap").attr("transform", "translate(20, 270)");
        	});
        	
	        nv.addGraph(function() {
	        	// TODO put subtitle somewhere
	        		
	        	d3.select('#' + renderTo)
	        		.datum(pieData)
	        		.transition().duration(2000)
	        		.call(chart);
	        		
	        	return chart;
	        });
	        
	        
	        return chart;
		}
		
		
		
		function generatePieChartDataTable(compareStatistics) {
			var tableData = new Array();
			
			function buildChangeDescriptionSpan(key, absChange) {
				var absChangeText = absChange > 0 ? "+" + absChange : absChange;
				var color = key.endsWith('PASSED') ? (absChange > 0 ? 'green' : 'red') : (absChange &lt; 0 ? 'green' : 'red');
				
				if (absChange != 0) {
       				return "&lt;span style='color: " + color + "'>" + absChangeText + "&lt;/span>";
       			}
      			return "-";
			}
			
			/*
			function buildDataTableLine(key, currentValue, compareValue) {
	        	var line = [ key, currentValue ];
	        	if (typeof(compareValue) !== 'undefined') {
	        		var absChange = currentValue - compareValue;
	        		line[2] = buildChangeDescriptionSpan(key, absChange);
	        	}
	        	return line;
			}*/
			
			
			function getTotalCount(statistics)
			{
			var totalCount =0;
			   jQuery.each(statistics.numberOfTestsByStatus, function(key, value) {
			   if(totalCount == 'undefined')
			   	totalCount = 0;
	           totalCount = totalCount+value;
	        });
	         if (statistics.numberOfIgnoredSuccessfulTests > 0) {
	            totalCount = totalCount + statistics.numberOfIgnoredSuccessfulTests;
	        }
	        if (statistics.numberOfIgnoredFailedTests > 0) {
	           totalCount = totalCount +statistics.numberOfIgnoredFailedTests;
	        }
	        return totalCount;
			}
			
			
			
			function buildDataTableLine(key, currentValue, compareValue,perstr) {
				var convertInt = parseFloat(perstr);
				var str = convertInt+"%";
	        	var line = [ key, currentValue ,str];
	        	if (typeof(compareValue) !== 'undefined') {
	        		var absChange = currentValue - compareValue;
	        		//line[2] = buildChangeDescriptionSpan(key, absChange);
	        		line[3] = buildChangeDescriptionSpan(key, absChange);
	        	}
	        	return line;
			}
			
			function valueOrZero(value) {
				if (typeof(value) === 'undefined') {
					return 0;
				}
				return value;	
			}
			
	        jQuery.each(currentStatistics.numberOfTestsByStatus, function(key, value) {
	        	var totalCount =getTotalCount(currentStatistics);
	            if(totalCount == 'undefined')
			   		totalCount = 0;
	            var percent = totalCount == 0 ? 0 : (value / totalCount) * 100; 
        		var perstr =  percent.toFixed(2) ; 
	        	if (typeof(compareStatistics) !== 'undefined') {
	        		tableData.push(buildDataTableLine(key, value, valueOrZero(compareStatistics.numberOfTestsByStatus[key]),perstr));
	        	}
	        	else {
	        		tableData.push(buildDataTableLine(key, value,'undefined',perstr));
	        	}
	        });
	        
	        tableData.sort(function(a, b) { 
	        	return expectedStatusOrder.indexOf(a[0]) - expectedStatusOrder.indexOf(b[0]);
	        });
	        
	        if (currentStatistics.numberOfIgnoredSuccessfulTests > 0) {
	         	 var totalCount =getTotalCount(currentStatistics);
	            if(totalCount == 'undefined')
			   		totalCount = 0;
	            var percent = totalCount == 0 ? 0 : (value / totalCount) * 100; 
        		var perstr =  percent.toFixed(2) ; 
	        	if (typeof(compareStatistics) !== 'undefined') {
	        		tableData.push(
	        			buildDataTableLine("IGNORED_PASSED", currentStatistics.numberOfIgnoredSuccessfulTests, valueOrZero(compareStatistics.numberOfIgnoredSuccessfulTests),perstr)
	        			);
	        	}
	        	else {
	        		tableData.push(buildDataTableLine("IGNORED_PASSED", currentStatistics.numberOfIgnoredSuccessfulTests,'undefined',perstr));
	        	}
	        }
	        
	        if (currentStatistics.numberOfIgnoredFailedTests > 0) {
	         var totalCount =getTotalCount(currentStatistics);
	            if(totalCount == 'undefined')
			   		totalCount = 0;
	            var percent = totalCount == 0 ? 0 : (value / totalCount) * 100; 
        		var perstr =  percent.toFixed(2);
	        	if (typeof(compareStatistics) !== 'undefined') {
	        		tableData.push(
	        		buildDataTableLine("IGNORED_FAILED", currentStatistics.numberOfIgnoredFailedTests, valueOrZero(compareStatistics.numberOfIgnoredFailedTests),perstr)
	        		);
	        	}
	        	else {
	        		tableData.push(buildDataTableLine("IGNORED_FAILED", currentStatistics.numberOfIgnoredFailedTests,'undefined',perstr));
	        	}
	        }
	        
	        var columns = [
	        	{ title: "Status", className: "aludratest-center" },
	        	{ title: "# of test cases", className: "aludratest-center" },
	        	{ title: "% of test cases", className: "aludratest-center" }
	        ];
	        
	        if (typeof(compareStatistics) !== 'undefined') {
	        	columns.push({ title: "Change", className: "aludratest-center" });
	        }
	        
	        jQuery('#chart_pie_datatable').DataTable({
        			data: tableData,
        			columns: columns,
        			paging: false,
        			searching: false,
        			ordering: false,
        			info: false
        	});
		}
		
		jQuery(function() { 
			window['current_testCases_pieChart'] = generateExecutionPieChart("chart_pie_current", currentStatistics);
			if (typeof(compareStatistics) !== 'undefined') {
				generateExecutionPieChart("chart_pie_compare", compareStatistics);
				generatePieChartDataTable(compareStatistics);
			}
			else {
				generatePieChartDataTable();
			}
		});

	</script>
</j:jelly>